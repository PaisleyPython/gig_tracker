initial idea: 
Create web Application with the django framework to allow users to vote in a poll system on their availability for 
date requests. Users will receive text prompt with link to poll. If users dont vote, then every 24hours they will receive another text prompt until vote is complete. 
Once date has been added, then it will be added to confirmed page, which ideally will have link to a google calander API. 


TODO for deployment: 

- Change 'create gig' to 'update gig' with functionality. 
- Assess how many 'yes' votes required before gig card is generated. 
- Fix buttons for polls and results page
- Clean up poll index page -
- Clean code
- Make use of environment variables for twilio details. 
- Figure out why signal is sending 2 messages every executuion. could be model class
- Think about how you're going to deploy this application.. Is it going to be off the back of the website. 

TODO additional features: 
- have requirements for specific core band members. (drums, guitars, vocals, and 2 brass)
- Have polls app create with choices
- Create phonebook for users to use with signals
- Look to integrate google API for calendar



design: 

Application is going to utilise SQLite

In our poll app, we’ll create two models: Question and Choice. A Question has a question and a publication date. A Choice has two fields: the text of the choice and a vote tally. Each Choice is associated with a Question.

The name of each Field instance (e.g. question_text or pub_date) is the field’s name, in machine-friendly format. You’ll use this value in your Python code, and your database will use it as the column name.
python manage.py sqlmigrate polls 0001


python manage.py createsuperuser
Enter your desired username and press enter.

Username: admin
You will then be prompted for your desired email address:

Email address: admin@example.com
The final step is to enter your password. You will be asked to enter your password twice, the second time as a confirmation of the first.

Password: **********
Password (again): *********
Superuser created successfully.


git fetch origin master
git reset --hard origin/master

Twilio - 958WUEE8VQS5NBNAP9LFLV87



==========================================

The logic of gig acceptance.. 

There needs to be a minimum requirement of accepted members with some considered core. 
Once threshold has been reached, gig will automatically get accepted and uploaded to the confimed page. 
text message notifications then need to be triggered and send to the members. 
I would also then like for the gmail calendar to be updated if this is possible.. 

=============================================================

# Always return an Http
# ResponseRedirect after successfully dealing
# with POST data. This prevents data from being posted twice if a
# user hits the Back button.

================================


gmail api = https://v1.nocodeapi.com/disco_panther/calendar/sRJIrdwKtVyDuCJI

bit branch gig_cards

Merge branches:

git checkout master
git pull origin master
git merge <name>
git push origin master

---------------------------------------

2) For removing all data from table:

python manage.py shell
>> from {app_name}.models import {model_name}
>> {model_name}.objects.all().delete()


------------------------

 c1 = c1.filter(venue="TBC")[0]
 >>> c1
<ConfirmedGigs: TBC>

>>> NameTag.objects.all()
<QuerySet [<NameTag: admin>, <NameTag: admin>, <NameTag: Simon>, <NameTag: Simon>, <NameTag: John>, <NameTag: John>, <NameTag: Mark>, <NameTag: Will>, <NameTag: Arwel>, <NameTag: Simon>]> 
>>> ConfirmedGigs.objects.all()
<QuerySet [<ConfirmedGigs: TBC>, <ConfirmedGigs: TBC>]>

>>> c1 = ConfirmedGigs.objects.filter(venue='TBC')[0]

>>> n1 = NameTag.objects.filter()[2] 
>>> n1
<NameTag: Simon>

>>> c1.tags.add(n1)                  
>>> c1
<ConfirmedGigs: TBC>
>>> c1.tags.all()
<QuerySet [<NameTag: Simon>]>


>>> from polls.models import NameTag
>>> from polls.models import ConfirmedGig
>>> c1 = ConfirmedGigs.objects.filter()[0]
>>> n1 = NameTag.objects.all()
>>> for name in n1:
...     c1.tags.add(name)


=========


gig cards created
tags go on card
if x amount of tags appear on card
confirmed becomes true
confirmed gets displayed on card. 